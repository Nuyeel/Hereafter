// Variables
// @import './clock.scss';
$baseSize: 2vw;
$baseTimeOrbit: 3s;
$baseTimeRotation: 4s;

$colorGalaxy: rgb(31, 35, 87);
$colorOrbit: #9587E180;
$colorOrbitBefore: #81A8E0;
$colorOrbitAfter: #81A8E080;
  
$ratioBackground: 1;
$ratioBorder: .05;
$ratioShadow: .25;
$ratioOrbit: .1;

$darken: 10%;
$lighten: 20%;

$perspective: 400vw;

// distance, ratioSize, ratioTimeOrbit, ratioTimeRotation, color, transform
$planets: (
  ( 0, .3, 3, 2, #ffd700, ( 1, 1, 1 ) ),
  ( 3.5, .5, 2, 1, #b5592a, ( 1, 0, 0 ) ), 
  ( 4, .6, 1, 0.9, #774181, ( 0, 1, 0 ) ), 
  ( 6, .9, .7, 0.8, #774181, ( 0, 0, 1 ) ), 
  ( 8, .2, .7, 1.8, #e6c2ec, ( 0, 0, 1 ) ), 
  ( -2, .1, 1.2, 1.6, #6beff4, ( 0, 0, 1 ) ), 
  ( 5, .1, 1, 1.6, #c68ae6, ( 0, 1, 0 ) ), 
  ( -2, .2, 4, 1.6, #f4c96b, ( 1, 0, 1 ) ), 



);

// Extends

%center
{
  display: flex;
  align-items: center;
  justify-content: center;
}

// Mixins

@mixin position ( $position )
{
  left: $position;
  transform-origin: -$position;  
}

@mixin orbit ( $size, $distance )
{
  $orbitBorder: $size * $ratioOrbit;
  $orbitSize: $distance * 2 + $orbitBorder;
  $orbitDistance: 2 * $orbitBorder;
  $orbitSizeBefore: $orbitSize - $orbitDistance;
  $orbitSizeAfter: $orbitSize + $orbitDistance;
  
  &
  {
    width: $orbitSize;
    height: $orbitSize;
    
    &,
    &::before,
    &::after
    {
      border-width: $orbitBorder;
    }
    
    &::before
    {
      width: $orbitSizeBefore;
      height: $orbitSizeBefore;
    }

    &::after
    {
      width: $orbitSizeAfter;
      height: $orbitSizeAfter;
    }
  }
}

// Cube colors

@mixin skin ( $size, $color )
{
  // $colorShadow: lighten( $color, $lighten);
  // $colorBorder: darken( $color, $darken );
  
  // $sizeShadow: $size * $ratioShadow;
  // $boxShadow: 0 0 $sizeShadow $sizeShadow * .25 $colorShadow inset;
     
  &,
  &::before,
  &::after
  {
    background-color: rgba( $color, $ratioBackground );
    // border: $size * $ratioBorder solid $colorBorder;
    // box-shadow: $boxShadow;
  }
}

// Cube

@mixin cube ( $size )
{
  width: $size;
  height: $size;
}

// Cube faces

@mixin cubeFaces ( $half )
{
  &:first-child
  {
    & { transform: rotate3d( 0, 1, 0, 0deg ) translate3d( 0, 0, $half ) }
    &::before { transform: rotate3d( 0, 1, 0, 90deg ) translate3d( $half, 0, $half ) }
    &::after { transform: rotate3d( 0, 1, 0, -90deg ) translate3d( -$half, 0, $half ) }
  }

  &:last-child
  {
    & { transform: rotate3d( 0, 1, 0, 180deg ) translate3d( 0, 0, $half ) }
    &::before { transform: rotate3d( 1, 0, 0, 90deg ) translate3d( 0, -$half, $half ) }
    &::after { transform: rotate3d( 1, 0, 0, -90deg ) translate3d( 0, $half, $half ) }
  }
}

// Cube animation

@mixin cubeAnimation ( $timeAnimation, $transform )
{
  animation-duration: $timeAnimation;
    
  @keyframes rotation
  {
    100% { transform: rotate3d( $transform, 360deg ) }
  }
}

// Galaxy animation

@mixin galaxyAnimation ( 
  $duration: 10s, 
  $distance: 5vw, 
  $angle: 60deg,
  $animated: true,
  $reversed: false,
)
{
  $direction: if( $reversed, 1, -1 );
  
  $distance: $direction * $distance;
  $angle: $direction * $angle;
  
  @if $animated
  {
    animation: galaxy infinite ease-in-out alternate $duration;
    
    @keyframes galaxy
    {
      0% { transform: translate3d( 0, $distance, 0 ) rotate3d( 1, 1, 1, $angle ) }
      100% { transform: translate3d( 0, -$distance, 0 ) rotate3d( 1, 1, 1, -$angle ) }
    }
  }
  @else
  {
    transform: translate3d( 0, $distance, 0 ) rotate3d( 1, 1, 0, $angle );
  }
}

// Planet

@mixin planets ( 
  $planets, 
  $baseSize: 5vw, 
  $baseTimeOrbit: 5s, 
  $baseTimeRotation: 5s 
)
{
  $index: 1;
  
  $prevDistance: 0;
  
  @each 
    $distance, 
    $ratioSize, 
    $ratioTimeOrbit, 
    $ratioTimeRotation, 
    $color, 
    $transform 
  in $planets
  {
    $size: $baseSize * $ratioSize;
    $half: $size / 2;
     
  
    $nextDistance: $prevDistance + $distance + $half;

    
    $currentDistance: if( $index == 1, 0, $nextDistance );
    $currentPlanetDistance: if( $index <= 4, 0, $nextDistance );
    
    .box:nth-of-type( #{ $index } )
    {
      .planet
      {
        @include position( $currentPlanetDistance );
        
        animation-duration: $ratioTimeOrbit * $baseTimeOrbit;
        
        .cube
        {
          @include cube( $size );
          @include cubeAnimation( 
            $ratioTimeRotation * $baseTimeRotation, 
            $transform 
          );
        }
        
        .face
        {
          @include cubeFaces( $half );
          @include skin( $size, $color );
        }
        
        // @if $index > 1
        // {
        //   @include orbit( $size, $currentDistance );
        // }
      }
      
      .orbit {
        @if $index > 1
        {
          @include orbit( $size, $currentDistance );
        }
      }
    }
    
    $index: $index + 1;
    $prevDistance: $currentDistance + $half;
  }
}



// Layout

.yun-clock-container
{

  width: 800px;
  height: 600px;
  outline: 0;
  margin: 0;
  border: 0;
  padding: 0;
  box-sizing: border-box;
}

.clockbody
{
  // background-color: rgb(220, 114, 114);
  width: 100%;
  height: 100%;
}

.hours,.minutes,.seconds, .miliseconds
{
  @extend %center;
  position: absolute;
  transform-style: preserve-3d;
}

// Cosmos

.cosmos
{
  @extend %center;
  width: 100%;
  height: 100%;
  overflow: hidden;
  perspective: $perspective;
  // background-color: $colorGalaxy;
}

// Galaxy

.galaxy
{
  // Planets 
  @include planets( $planets, $baseSize );
  
  @include galaxyAnimation();
  transform-origin: center center;
  transform-style: preserve-3d;
}

// Box

.box
{
  @extend %center;
  transform-style: preserve-3d;
}

.planet
{
  animation: orbit infinite linear;
}

// Orbit

.orbit
{
  @extend %center;  
  transform: rotate3d( 1, 0, 0, 90deg );
  
  &,
  &::before,
  &::after
  {
    position: absolute;
    border-radius: 50%;
    border-style: solid;
  }
  
  &::before,
  &::after
  {
    content: '';
  }
  
  &
  {
    border-color: $colorOrbit;
  }
  
  &::before
  {
    border-color: $colorOrbitBefore;
  }
  
  &::after
  {
    border-color: $colorOrbitAfter;
  }
}



// Cube

.cube
{
  animation: rotation infinite linear;
}

// Cube face

.face
{   
  &,
  &::before,
  &::after
  {
    width: 100%;
    height: 100%;
    border-radius: 50%;
  }

  &::before,
  &::after
  {    
    content: '';
    position: absolute;
    box-sizing: content-box;
  }
}

// Animations

@keyframes orbit
{
  100% { transform: rotate3d( 0, 1, 0, 360deg ) }

}

.hours{
  width: 10px;
  height: 5px;
  // background-color: #fff;
}
.minutes{
  width: 100px;
  height: 5px;
  background-color: rgb(127, 197, 229);
  left: 0px; 

}
.seconds{
  width: 200px;
  height: 5px;
  background-color: rgb(215, 99, 230);
 
  left: 0px; 
}
.miliseconds{
  width: 230px;
  height: 5px;
  background-color: rgb(227, 230, 148);
  left: 0px; ;

}